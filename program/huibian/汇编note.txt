参考资料：
       [1]https://blog.csdn.net/weixin_42109012/article/details/102726296?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
--------运行--------
运行环境：Windows10 64位[DOSBOX]
1、环境配置
   参考-参考资料[1]
2、运行程序
   在"ASSEMBLY/ASM"文件夹下编写asm后缀汇编文件
   1、编译[masm hello.asm] 2、连接[link hello.asm] 3、运行[HELLO.EXE] 4、调试[debug hello.exe]
   简洁运行: 
            1、masm "hello.asm路径"\hello; 
			2、link "hello.obj路径"\hello; 
			3、"hello.exe路径"\hello     
2、PSP区
   定义：一共256个字节[10H], DOS用此部分空间和程序进行通信
   程序加载前，PSP在DS:0处。程序加载, 从DS:0往后划分10H用作PSP区[DS:0-DS:10H], 此时CS为DS:10H[程序开始存放位置] 
3、debug调试
   在dosbox下执行debug:默认都是16进制，不需要在数据后添加H标识
   1、寄存器内容
      -r [查看]
	  -r ax[-r ip/cs...改变寄存器ax内容]
   2、内存内容
	  1、查看
		  -d [-d 1000:0 查看从1000段地址开始的内存内容, 直接-d即查看当前cs:ip开始的内存内容（左：地址 中间:16进制值 右:对应ascii值）]
			 [-d 1000:0 9 查看从1000段地址0偏移地址的前10个内存内容	]
			 [-d 1000:0 0 查看从1000段地址0偏移地址的内存内容]
			 [-d 1000:0000 0083 查看从1000:0000 到 1000:0083的内容]
      2、修改
          -e 1000:0 0 1 2 3[修改从1000段地址开始0偏移地址的4个元素，分别赋值0,1,2,3]  
          -e 1000:10 回车 [一个个修改从1000段地址开始0偏移地址的内存内容。内容可为(输入空格表示不对当前内存单元进行改写)]
          -e 1000:0 b8 01 00 b9 02 00 01 c8[往内存写入机器码]
          -a 1000:0 [从1000段地址开始0偏移地址写入汇编指令，直接-a表示从当前cs:ip指向地址开始填汇编指令]
      3、翻译
	      -u 1000:0[将从1000段地址开始0偏移地址的机器码，翻译成汇编指令]
      4、执行
	      -t [执行当前cs:ip指向段地址偏移地址的内存机器码]
   3、加载运行程序
	  debug hello.exe;
	  1、单步运行
	     -t...
      2、选择运行至某处
         -g 000c [如程序从CS: 0000~000F, 可选择000C, 直接-g 000c, 表示执行程序到当前代码段000c处(除000c外，之前代码均执行完)]
         -p [当遇到循环，可在loop ..时，选择-p, debug自动重复执行循环，直到(cx)=0跳出循环位置（-g也行）]
      3、int 21处理
	    -p [Int 21使用-p执行]
   4、退出debug
      -q
   5、补充
	  1、采用段寄存器访问
		  -r ds
		  : 10000
		  -d ds:0 		  
      2、-t操作段寄存器
	     当-t执行修改段寄存器，会自动执行下一条指令
4、伪指令
   汇编指令一共分两种。一种是汇编指令[有对应机器码可以被编译被CPU执行],另一种是伪指令[没有对应机器码，不能被CPU执行，只能被编译器执行]
   assume cs:codesg [将段与寄存器挂钩]
   codesg segment ["codesg段"定义]
          mov ax, 0123H
		  ...
		  mov ax, 4c00H[程序返回指令]
	      int 21H [程序返回指令]
   codesg ends ["codesg段"结束标志]
   end ["源程序的编译"结束标志]
--------CPU--------
1、控制形式
   PC主板上的核心器件通过总线[地址、数据、控制总线]相连。主板的扩展卡槽外接接口卡，CPU通过总线控制外接接口卡，
   从而控制外设
2、可直接读写数据
   1、CPU内部寄存器
   2、内存单元
   3、端口[除CPU的其他芯片所包含的寄存器]
--------8086--------
1、数据总线宽度:16位[一次性可传输16位数据，即2字节]、地址总线宽度:20位[寻址能力达1MB]
2、所有寄存器均为16位
--------总线--------
区分：地址总线、数据总线、控制总线
1、地址总线
   一个CPU有N根地址总线[代表CPU地址总线宽度为N, 可以寻找2的N次方个内存单元]
2、数据总线
   一个CPU有N根数据总线[代表CPU数据总线宽度为N, 可以一次传输N位二进制数据(即N/8个字节)]
3、控制总线
   一个CPU有N根控制总线[代表CPU控制总线宽度为N]
--------存储器--------
1、数据和程序在存储器中以"二进制数据"形式存放 
2、只读存储器[只读，断电后存在], 随机存储器[可读可写，断电后信息丢失]
--------内存--------
1、特定内存地址
   1、显卡地址操作
      位于B8000H~BFFFFH[共32Kb, 分为8页，每页4kb
	  [每页分为25*80(25行,每行有80个字符(2字节))
	  每个字符的低位存放字符的ascii值，高位存储字符属性(背景色,请景色,闪烁,高亮等)
	  eg:
          -e B800:0000 41 02 [显示黑底绿色的'A']	
--------寄存器--------
0、存储
   字单元：存放一个16位的内存单元，由高低连续内存单元组成。
           高地址内存单元中存放数据的高位字节，低地址内存单元存放数据的地位字节
           ["字/字型数据一个字单元/"由2、3两个内存单元组成，则这个字单元起始地址为2，称为2地址字单元]
1、通用寄存器
   作用：存储一般性数据[AX、BX、CX、DX]，其中每个寄存器可分为两个独立的8位寄存器使用(高8，低8)
        [AX分为AH和AL, BX可分为BH和BL, CX可分为CH和CL, DX可分为DH和DL
		 还有di, si(2字节寄存器，但不可分)]
   1、可用于间接寻址寄存器
      si、di、bx、bp
2、常见赋值计算指令
   1、mov ax, 18 [相当于ax = 18]
   2、add ax, 7  [相当于ax = ax + 7]
   3、mov ax, bx [相当于ax = bx]
   4、add ax, bx [相当于ax = ax + bx]
   5、and al, 00000001B [按位"与运算"]
	  or al, 00000001B [按位"或运算"]
	  可处理问题：
	           1、使用位运算进行加减法
			      and al, 11011111B [小写改大写]、or al, 00100000B [大写改小写] 
   6、inc
       mov bx, 1
	   inc bx  [执行后,bx=2]
   7、逻辑移位指令 
      1、shl [逻辑左移指令]
         eg:
	        mov al, 01001000b
		    shl al, 1 ; 执行后(al)=1001000b, cf=0
		   [如果移动位数大于1，必须将移动位数放在cl中.eg: mov al, 01010001b. mov cl, 3. shl al, cl]
      2、shr [逻辑右移指令]
         同理shl
      [当shl, cf取决于al左移时超出al左边的值.同理shr]  
   8、dup 
      dup与dd、dw、db等配合使用，用于重复定义开辟内存
	  eg： db 200 dup(0) 相当于 db 0,0,0,0 [一个两百个0]
   9、乘除法
      6.1、div除法
		   1、除数为16位
			  则被除数为32位
			  eg: 100001/100
				  mov dx, 1
				  mov ax, 86a1H
				  mov bx, 100
				  div bx 
		   2、除数为8位
			  则被除数为16位
			  eg:1001/100
				 mov ax, 03e9H
				 mov bl, 100
				 div bl
		   商余规则：如果被除数为8位，则AL存储商、AH存储余数
					如果被除数为16位，则AX存储商，DX存储余数
      9.2、mul乘法
	       [要么都为8位，要么都为16位]
	       1、数为8位
		      则另一数也为8位
			  eg: 100*10
			      mov al, 100
				  mov bl, 10
				  mul bl ; (ax)=1000
		   2、数为16位
		      则另一数也为16为
			  eg: 100*10000
			      mov ax, 100
				  mov bx, 10000
				  mul bx ; f4240h=1000000[(dx)=000fh, (ax)=4240h]
		   乘法结果规则: 如果是8位乘法, 结果放在ax中.
		                 如果是16位, 结果高位放在dx中, 结果低位放在ax中
   10、 dd定义双字单元[即两个dw]
	    例子: 将data段的dd作为被除数，第一个dw作为除数，结果的商放在第二个dw中
	    assume cs:code
	    data segment
		     dd 100001
	   	     dw 100
		     dw 0
		data ends
		code segment 
			 start: mov ax, data
		            mov ds, ax 
				 
				    mov ax, ds:[0]
				    mov dx, ds:[2]
				    div word ptr ds:[4]
				    mov ds:[6], ax
				
				    mov ax, 4c00h
				    int 21h
	    code ends
	    end start 
3、20位地址计算
   1、组成
	  CPU使用"地址加法器"将2个16位地址[段地址:偏移地址]合成一个20位的物理地址
      物理地址 = 段地址*16 + 偏移地址[eg: 123C8H =  1230H*16 + 00C8H]
      补： cpu可用不同的段地址和偏移地址表示同一物理地址 
   2、说法
      数据存在内存1230:00c8单元中、数据再1230H段中的00c8H单元中
   3、段寄存器
      种类：CS[指令]、DS、ES、SS	
4、指令相关
   CS: 存放指令段地址、IP：存放指令的偏移地址
   在任意时刻，CPU将CS:IP中的内容当做指令的段地址和偏移地址，用它们合成指令的物理地址到内存中读取指令码
   [执行完后，IP会根据存储指令码的字节长度自增，以使CPU读取下一条指令]
   1、修改CS: IP
      1、完全修改
         jmp 2AE3:3 [执行完后CS为2AE3H, IP为0003H, CPU将从2AE33H处读取指令]
	  2、单独修改IP
	     jmp ax [将ax内容赋给IP]
5、数据相关
   DS:存放数据段地址
   将ds:0内容赋值给寄存器: mov bx, 1000H //  mov ds, bx // mov al, [0]
   mov ax, [0000] [如果ds为0001H, 则0001:0000为00010H, 0000:0010为00010H, 0000:0010与0001:0000指向内存地址相同]
6、栈
   原则:LIFO[fist in last out. 后进先出]数据从栈顶[低字节]进入，栈底为高字节
   SS:存放栈顶段地址 SP:存放栈顶偏移地址[SS:IP永远指向栈顶元素]
   1、指向问题
      当栈空时，SS:SP指向栈空间最高地址单元的下一个单元[8位]
	  8086无法检测栈顶、栈底超界问题
   2、用法
      push 寄存器 [入栈，将一个寄存器中的数据入栈]
	  pop  寄存器 [出栈, 用一个寄存器接受出栈的数据] 
	  注意：出入栈均以字[16位]为一个单位 push [0]、pop [0]
	        执行push or pop，cpu均会改变sp
   3、开栈
      mov ax, 2000
	  mov ss, ax
	  mov sp, 10     [将2000:0000~2000:000F为栈空间，初始化栈顶]
   2、bp
      如果没有显示指定段寄存器，则[bp]默认段寄存器为ss
	  mov ax, [bp] [(ax) = ((ss)*16+(bp))]
7、符号约定使用
   1、[BX]类型
	  当ds为1000H, bx为0003H
	  mov ax, [bx] [意为: 将1000:0003对应内存地址字单元(16位)的值赋给ax]
	  mov al, [bx] [      将1000:0003对应内存地址单元(8位)的值赋给al]
   2、(bx)-(al)-((ds)*16+(bx))
      通常将(bx)-(al)-((ds)*16+(bx)) [(bx)：bx指向内存地址的内容值(16位), (al): al指向内存地址的内容值(8位),((ds)*16+(bx))... ]
   3、偏移地址表示
      1、[bx+idata]
		 [bx+idata]表示一个内存单元[地址为: ds:[(bx)+idata]]
		  eg: mov bx, 0001H
			  mov ax, 0008H
			  mov ds:[4], ax
			  mov ax, [bx+3] [ax值为0008h, 因为[bx+3]指向ds:[4]地址]
		  补充：[bx+3]也可以写为3[bx]
	   2、[bx+si]
		  [bx+si]表示一个内存单元[地址为: ds:[(bx)+(si)]]  
		  补充：[bx+si]也可以写为[bx][si]  
       3、[bx+si+idata]
	      [bx+si+idata]表示一个内存单元[地址为: ds:[(bx)+(si)+idata]]
	      补充：[bx+si+idata]也可以写为idata[bx][si]或idata.[bx][si]
   4、byte ptr/word ptr
      mov word ptr ds:[0], 1  [指定cpu访问的ds:0为字单元]
	  mov byte ptr ds:[0], 1  [指定cpu访问的ds:0为字节单元]
   5、标号的写法
      
      1、普通
	     s: mov ax,1 
		    loop ...
	  2、数据标号
		 1、同一个段内使用
		     [作用:表示一个段的内存地址]
			 a db 1,2,3,4,5,6
			 b dw 0
			 ...
			 mov ax, b ; 相当于mov ax, cs:[8]
			 mov b, 2  ; 相当于mov word ptr cs:[8], 2
			 inc b     ; 相当于inc word ptr cs:[8]
			 
			 mov al, a[si] ; 相当于mov al, cs:0[si], 即cs:[si+0]
         2、不同段使用
		    在code段使用data段的a,b.必须assume指明data段, 且在code段使用mov ax, data mov ds, data作出声明
		    1、表示一个段的内存地址
				assume cs:code, ds:data 
				data segment
					 a db 1,2,3,4,5,6,7,8
					 b dw 0
				data ends
				code segment 
					 start: 
							mov ax, data
							mov ds, ax
							mov si, 0
							mov cx, 8
						   s:mov al, a[si]  
            2、作为偏移地址
               1、data segment
                       a db 1,2,3,4,5,6,7,8
                       b dw 0
                       c dw a,b  ; 相当于c dw offset a, offset b 
                  data ends 
               2、data segment 
                       a db 1,2,3,4,5,6,7,8
                       b dw 0
                       c dd a,b  ; 相当于c dw offset a, seg a, offset b, seg b [seg: 取得某一标号的段地址]		   

           3、应用
		      表映射: 代码清晰、方便功能扩充
			        eg1: 使用0~15与'0~F'的映射显示字节的十六进制[如：11110001显示为F1H] 
					    1、table db '0123456789' 
					    2、分别用两个8位寄存器al,ah存取1111 0001 的高4位[ah=00001111]以及低4位[al=00000001]
                        3、根据al,ah的值, 从table中取值
                    eg2: 计算sin0、sin30、sin60...的值
                        1、table dw ag0, ag30, ag60, ag90, ag120, ag150, ag180
                           ag0   db '0'
                           ag120 db '0.866', 0
						   ...
                           ag180 db '0'
                          [根据偏移值从table中取值,eg: ag0(等同于offset ag0)]
                        2、根据0, 30...通过转化为table对应的偏移值, 得到对应的值,eg:ag0[等同于offset ag0]
                        3、根据table[ag0]转到ag0执行代码逻辑                                                                      						
                    eg3: 根据输入数据，在表中找到对应子程序执行 
					    1、编写program1, program2, program3子程序代码逻辑[注意使用ret从子程序返回]
						2、table dw program1,program2,program3
					    3、根据输入数据, 作为table标号偏移值,取得对应子程序,eg: 取得program1[相当于offset program1]	
8、转移及子程序设计     4、根据table[program1]转到program1执行代码逻辑   
   对于Jmp, short, 转移依据标号相对地址[补码]
   eg: 基于cs:ip运行规则
	   [当cs:ip指向某一指令a时: 1、cpu读取a入指令缓冲器，2、ip+2或3(a..指令占2个字节或3个字节), 3、执行指令缓冲器的a指令]
	   [当cs:ip指向jmp s时(jmp对应偏移地址为0008H), 在运行jmp指令前, ip指向000a. 如果标号s对应偏移地址为000b, 那么jmp 偏移地址为1,
																			   如果标号s对应偏移地址为0001, 那么相对地址为-9(-9补码为F6)，执行-9跳转]		 
   1、标号偏移地址计算[offset]
	  定义：取得标号对应偏移地址[及标号对应ip值]
	  assume cs:codesg 
	  codesg segment
		     start: mov ax, offset start [因为start是执行语句的开始，所以offset start 为0]
			        s: mov ax, offset s     [因为s是执行完start: mov ax, offset start[3字节]后的语句,所以offset s为3 ]
   2、[短距离跳转,上127字节，下128字节]
	  start: mov ax, 0
		     mov bx, 0
		     jmp short s [jmp short s计算跳转偏移地址，ip值变，执行s:inc ax(不再执行add ax,1)]
		     add ax, 1
		   s:inc ax 
	  jmp short s为8位位移进行跳转，jmp near ptr s 为16位位移进行跳转
   	  方式: 段不变，通过改变偏移地址实现跳转[段内跳转]
   3、[远距离跳转..]
	  start: mov ax, 0
		     mov bx, 0
		     jmp far ptr s
		     db 256 dup (0)
		   s:add ax, 1
		     inc ax
	  方式：段和偏移地址都有改变，cs段：标号s的段地址，ip:标号s的ip地址[段间跳转]
   4、转移地址在寄存器中
	  jmp ax[指定16位reg] 
   5、转移地址在内存单元中
	  1、段内跳转
	     mov ax, 0123H
	     mov ds:[0], ax
	     jmp word ptr ds:[0] ; 执行完后ip=0123H
	  2、段间跳转		 
	     mov ax, 0123H
	     mov ds:[0], ax
	     mov word ptr ds:[2], 0
	     jmp dword ptr ds:[0]  ; ds:[2]为转移段地址(即cs)、ds:[0]为转移偏移地址(即ip)
   6、有条件转移
	  jcxz 标号 ; 相当于 if ((cx)==0) jmp short 标号, 如果cx!=0, 那么什么也不做，直接往下执行
   7、ret及retf
	  ret: 修改ip的内容，相当于pop ip [段内转移] 
	  retf: 修改cs和ip的内容，相当于pop ip, pop cs[段间转移]
   8、call 标号
	  call s [相当于push ip, jmp near ptr s[段内]]
	  call far ptr s [相当于push cs, push ip, jmp far ptr s]
   9、call 16位reg
	  call bx [相当于push ip, jmp (bx)]
   10、call word ptr 内存地址
	   转移地址在内存地址中
	   call word ptr ds:[0] [相当于push ip, jmp word ptr ds:[0]] 
   11、call dword ptr 内存地址
	   相当于push cs, push ip, jmp dword ptr 内存单元地址
	   mov sp, 10h
	   mov ax, 0123h
	   mov ds:[0], ax
	   mov word ptr ds:[2], 0
	   call dword ptr ds:[0]  ; (cs)=0, (ip)=123H, (sp)=0CH
   12、子程序设计[call与ret配合使用]
	   call s
	   ....
	   mov ax, 4c00h
	   int 21h
     s:add ax, ax
	   ret           [当cs:ip指向call s并运行后，程序执行s标号内容，然后返回到call s下一个指令继续执行]
8、循环[loop]
   原理:cpu执行loop指令时[遇到loop s时]，先执行(cx)=(cx)-1, 然后判断cx的值[如果cx不为0则转移至标号处执行程序，如果cx为0则程序向下执行]
     mov ax, 2
     mov cx, 11
   s:add ax, ax
     loop s
   应用：双重循环
             mov bx, 0 
			 mov cx, 4
		   s:
		     push cx 
		     mov cx, 4   
			 mov si, 0
			 x:
			   mov al, [bx+2+si] 
			   and al ,11011111b
			   mov [bx+2+si], al
			   inc si
			   loop x
			 add bx, 13
			 pop cx
			 loop s
9、"字型数据定义-存储"及"段地址的定义-引用"
   1、在程序中定义字型数据
     [dw: 开辟内存空间用于字型数据（2个字节）定义及存放]
	 [db: 开辟内存空间用于字节数据（1个字节）定义及存放]
	  assume cs:code 
	  code segment 
		   dw 0123h, 0464h [dw写在程序开头，则0123h, 0464h存储位置分别为cs:ip~cs:ip+2、cs:ip+3~cs:ip+4]
            mov bx, 0
			...
            int 21h
      code ends
      end  
	  
   2、由于9.1在程序开头写了dw, 需要声明程序指令开始位置[声明后,ip会指向此偏移地址]
      assume cs:code 
	  code segment 
	       dw 0123h, 0464h
           start: mov bx, 0 [声明start后，程序第一条指令从mov bx, 0此处开始执行]
                  ...
                 int 21h
      code ends
      end 
	 如果不指明入口，CPU会把这些数值数据当成汇编指令执行
   3、段地址定义与引用
      assume cs:code, ds:data, ss:stack [关联]
	  data segment  [数据段]
	       dw 0123h, 0456h, 0789h...
	  data ends
	  stack segment [栈段]
	       dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	  stack ends  
	  code segment  [代码段] 
	       start: mov ax, stack
                  mov ss, ax
                  mov sp, 20h                  
				  ...
		          mov bx, data 
	  其中 mov ax, stack[将stack段地址赋值给ax]
           mov bx, data [将data段地址赋值给bx]	
      补充：如果段中的数据占N个字节，则程序加载后，该段实际占有空间为N%16==0 ? N: (N/16+1)*16		        
11、标志介绍及利用标记做操作的指令
   mov、push、pop不影响标志位的值
   1、标记介绍
	   1、ZF
		  如果执行结果为0, 则标志ZF=1。如果执行结果为1, 则标志为0[位累2进1, 无符号有符号ZF结果都一样]
		  eg: 
			 mov ax, 1
			 sub ax, 1 [因执行后ax=1, 所以ZF=0]
			 sub ax, 1 [因执行后ax=0, 所以ZF=1]
	   2、PF
		  如果执行后，结果的所有bit位中1的个数为偶数，pf=1。否则pf=0[位累2进1, 无符号有符号PF结果都一样]
		  eg:
			 mov al, 1  [0000 0001]
			 add al, 10 [0000 1011] [al中一共3个1，pf=0] 
	   3、SF
		  如果执行后，结果为负，则sf=1。否则sf=0[位累2进1, 无符号有符号SF结果都一样]
		  eg:
			 mov al, 1
			 sub al ,1 [al为0， 则SF=0]
		  补充：如果进行的是有符号运算、如果进行的是无符号运算[视情况确定sf的值]
	   4、CF
		  [对于无符号]如果运算过程中，最高有效位产生了进位或者向更高处的借位，则CF=1。否则为0
		  eg:
			 mov al, 98H
			 add al, al  [产生向更高位进位, CF=1]
			 
			 mov al, 97H
			 sub al, 98H [因为97H小于98H,所以向更高位借位，CF=1]
	   5、0F
		  [对于有符号]如果进行有符号运算的结果超出了机器所能表示的范围，则溢出OF=1,否则为0
		  eg:
			 mov al, 98
			 add al, 99 [结果197(溢出), 超出了有符号127的范围]
       6、DF
          df=0 每次操作后si, di递增[cld指令可将DF置0]
	                                mov cx, 16 
								    cld 
							     	..
		  df=1 每次操作后si, di递减[std指令可将DF置1]
									mov cx, 16 
									std 
									..
      
   2、利用标志值进行操作的指令
	   1、ADC[会影响CF]
		  作用：在16位及以下加法计算, 使用add足以。
		        在16位以上加法计算, 需要使用adc配合ADD进行加法运算
		  eg:
			 计算1EF000H+201000H
			 1、mov ax, 001EH 
				mov bx, 0F000H
				add bx, 1000H
				adc ax, 0010H
			 2、计算1EF0001000H+2010001EF0H
				mov ax, 001EH [高16位]
				mov bx, 0F000H [次16位]
				mov cx, 1000H [低16位]
				add cx, 1EF0H 
				adc bx, 1000H
				adc ax, 0020H 
		  执行：adc 操作数1, 操作数2 [操作数1 = 操作数1+操作数2+CF]
	   2、SBB[会影响CF]
		  作用：在16位及以下减法计算, 使用sub足以。
		        在16位以上减法计算， 需要使用sbb配合sub进行减法运算   
		  eg:
			 同理adc[低16位与低16位相减, 高16位使用sbb相减]
		  执行：sbb 操作数1, 操作数2 [操作数1 = 操作数1+操作数2-CF]
	   3、CMP
		  作用：相当于减法指令，不保存结果，只影响标志
		  [通过标志位，来比较进行cmp的两个操作数]
		  概念：实际结果的正负和逻辑上的正负
				实际结果的正负: 基于2进制[满2进1，每个位运算], 使用sf标志实际结果的正负
				逻辑上的正负：以10进制加减去理解[-126<-111，1<2]
		  在cmp下:
				 如果of=0[无溢出], 则逻辑上的正负=实际结果的正负
				 如果of=1[有溢出], 则逻辑上的正负 和 实际结果的正负相反 
		  应用：
			  [todo：总结无符号、有符号条件转移(大于或等于..大于..)]
			  1、无符号条件转移[je|jne|jb|jnb|ja|jna]
				eg: je s
					[无论什么指令，只要造成zf=1，即转移]
					cmp ah, bh
					je s
					add ah, bh
					jmp short ok
					s: add ah, ah
			  2、有符号条件转移[jg\jl\jz]
	   4、pushf
	      作用：将标记寄存器的值压栈
	            mov ax, 0
	            pushf  
	   5、popf
	      作用：将栈中弹出数据，送入标志寄存器中
			    mov ax, 0
				push ax
			    popf 
12、串传送指令
   作用：用于批量处理内存数据
   1、movsb
      作用：将ds:si 执行的内存单元的一个字节送入es:di中，然后根据寄存器df位的值，
	        将si和di递增或递减[df=0: inc si, inc dii. df=1, dec si, dec di]
      mov cx, 0
      rep movsb
      .. 	  
	    
   2、movsw
      作用:将ds:si 执行的内存单元的一个字送入es:di中，然后根据寄存器df位的值，
	        将si和di递增或递减[df=0: add si, 2, add dii, 2. df=1, sub si, 2. sub di, 2]
   3、rep 
      作用: 根据cx值，重复执行后面的串传送指令
      eg: 
         rep movsb[相当于s: movsb loop s]	
   4、iret
      作用：从栈中分别取出ip, cs, psw标志寄存器[通常和硬件制动完成的中断过程配合使用]
      iret相当于: pop ip, pop cs, popf 	
      [iret与int配合使用：如果使用额外[除int 21]中断, 并且执行中断程序后需要继续往下执行, 则需要在中断程序中iret释放cs ip psw, 让程序继续正常运行]	
--------ASCII和BCD--------				
1、ascii
   1、mov al, 'a' [相当于mov al, 61H(根据ascii码进行计算)]
   2、db 'unix' [相当于db 75h, 6eh, 49h, 58h(根据'u', 'n', 'i', 'x'对应ascii码进行计算)] 
2、BCD
   用4个二进制数表示十进制数
   eg: 0010 0110 表示十进制26
--------中断--------
1、定义
   CPU执行完当前命令后，检测到特殊信息[中断产生]。硬件根据中断向量表找到中断处理程序的入口，
   并将cs:ip指向它，导致CPU不再接着向下执行，转而执行这个特殊信息[中断]
2、类型
   1、cpu内部中断
	  A: 除法错误[中断码0]
	  B：单步执行[中断码1]
	  C: 执行into指令[中断码4]
	  D: 执行int指令[int n，中断码为n]
3、中断向量表
   定义：中断处理程序入口地址的列表
   [8086规定中断向量表地址存放在0000:0000~0000:03ff共1024个单元中]
4、中断执行步骤
   [使用于内中断、可屏蔽外中断]
   1、取得中断类型码N
   2、pushf
   3、tf=0, if=0
   4、push cs
   5、push ip
   6、(ip)=(N*4), (CS)=(N*4+2) ; cs ip指向中断入口程序
   7、cpu执行中断码对应中断程序
5、自定义中断程序
   1、编写中断程序
   2、将中断程序放置在0000:0200[中断向量表空闲内存]
   3、找到中断码对应的中断向量表内存，修改表项[即表项存的cs:ip值]值指向0000:0200
   [注意：需要在自定义中断程序开始Push[保存]你即将用到的寄存器的值, 返回前pop你所push各个寄存器的值, 最后iret返回
          (除非你在中断程序中完成所有，不再需要从中断返回继续执行)]
6、测试定义的中断程序
   eg: div 溢出中断[over_div.exe], 生成除法溢出程序[go.exe]
	   在dosbox下:
			   1、输入over_div.exe [执行自定义的div溢出中断程序]
			   2、输入go.exe [执行生成除法溢出的程序]
7、特殊情况
   cpu监测中断[一旦出现中断，转而执行中断程序],但是在一些特殊情况,即使发生中断，cpu也会继续往下执行，
   而不会转而执行中断程序[如: 单步调试下执行完ss赋值后,cpu不会中断进行单步调试状态, 而是会自动执行后面的sp赋值]
8、内中断
	1、存在的中断程序
	   1、dos自带
	      1、int 21h
		     mov ah, 4ch ;程序返回
		     mov al, 0 ; 返回值
		     int 21h  [表示使用int 21h中断例程的4ch功能(程序返回功能)]
          2、int 10h 
	         eg: 操作光标 int 10h...
		  3、 bios：基本输入输出系统[包含中断例程，可供程序员调用]	
9、外中断
    1、可屏蔽中断[外设输入]
	   1、定义：当cpu检测到可屏蔽中断信息.如果IT=1, 则cpu在执行完当前指令后响应中断，
	         如果IF=0, 则不响应可屏蔽中断
	         [sti, 设置IF=1   cli, 设置IF=0]
       2、执行过程： 参考"--------中断--------"第四条
       3、种类
	      1、键盘输入
		     第一步：键盘按下与松开都会产生扫描码[按下产生位置通码, 松开产生断码], 扫描码的信息会存入60h端口
			 第二步: 60h端口检测收到"第一步"的扫描码, 如果IF=1, 则引发int 9中断.
			 [0040:0017存储键盘状态字节,记录了控制键和切换键的状态]
	2、不可屏蔽中断
	   定义：当cpu检测到不可屏蔽中断信息时, 则在执行完当前指令后, 立即响应引发中断程序
             [中断类型码固定为2]
	   执行过程：1、pushf
                 2、IF=0, TF=0
                 3、push cs, push ip
                 4、(ip)=8、(cs)=0AH
       重定义int 9：
              ..  
			  [注意：重定义int 9需要保留原int 9中断执行程序指向内容[0:9*4, 0:9*4+2指向的ip, cs]
			         [这里的重定义是在模仿并执行原有Int 9程序基础上, 增加额外代码, 用于判定输入做出选择]
					 [call dword不要写错了]
--------端口--------
1、访问
   1、读
      in al, 60h  ; 从60h端口读取1字节并写入al中
      in ax, 60h  ; 从60h端口读取1字节到al, 从61h端口读取1字节到ah
   2、写
      out 21h, al ; 将al的值写入21h
	  out 21h, ax ; 将al写入21h端口，ah写入22h端口
   [对于60h\21h, 可使用dx等寄存器代替, eg: mov dx, 21h, in ax, dx..]   
2、CMOS RAM
   作用：属于128字节RAM[一部分用来保存时间信息，另一部分用来保存系统配置信息]
   读取：该芯片一共有2个端口, 70h和71h[cpu通过这个两个端口访问cmos ram]
         eg: 读取cmos ram的2号单元
		     mov al, 2
             out 70h, al
             in al, 71h		
   [秒：0单元、分：2单元、时：4单元、日：7单元、月：8单元、年：9单元（没有2019,只有19..同理2020、2018..）]   
--------常见错误--------
0、一定注意在asm下cs:[200]和cs:[200h]的区别
1、通用寄存器
   1、计算
      ax低8位al计算，进位不会到达ah中   
   2、赋值
      1、段寄存器
		 mov ds, 1000[错误] 8086不能直接将数据存到ds,cs等段寄存器, 但是可以在asm程序下mov ds:[0], 1000
		 mov ds, ax [正确]
         add ds, ax[错误] 
		 add ds:[0], ax [正确]
		 add ax, ds[错误] 8086段寄存器不能参于加减运算	
	   	 mov es:[0], ds:[0] [不建议][建议用其他寄存器中转ds:[0]的值，否则容易报寄存器不匹配的问题]
		 push ds, pop es [正确]
	  2、ax等寄存器
         mov ax, [0] [正确][将ds:[0]的0字单元赋给ax(16位)]
2、理解
   1、数据和程序
      数据和程序没有区别[均属于内存数据, 以2进制存储]，只有当cs:ip指向时才能成为程序，当ds指向时才能成为数据
   2、清零
      mov ax, 0;  
3、debug下和asm程序不同
   1、
     debug下编写：mov ax,123 [表示将0123H赋值给ax]
     notepadd下编写：mov ax, 123[表示将十进制123赋值给ax]
   2、
     debug下编写: mov ax, ffff[正确]
     notepadd下编写: mov ax, 0ffffH[数据不能以字母开头，需添加0]
   3、
     对于mov ax,[0]
     degbug表示：将ds:0数据赋值给ax
     notepadd下表示：将0赋值给ax[或者在notepadd下直接mov ax, ds:[0]] 
4、安全空间
   一般而言，dos方式下，0:200~0:2ff空间中，不会存在系统或其他程序的代码[最好还是-d查看这段区间是否数据全为0]
5、sp设置
   1、使用dw
      1、如果程序只有一个段，那么sp要考虑所有dw
	    eg:
		   code segment
                dw 0123h, 0456h, 0789h, 0adch, 0defh, 0fedh, 0eddh, 0fedh
                dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				start: mov ax, cs
					   mov ss, ax
					   mov sp, 30h [两次dw，一共划分了2*(8+16)=48个字节，也就是0030H。
					                实际栈范围为(0010H~002fH, 因为栈空，所以sp初始指向下一个字节单元，即0030H)]
	  2、如果程序数据、栈、代码各自划分一个段，那么sp只需要考虑栈段的大小，并相应设置
	  	  eg:
	     a segment
           dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffh
         a ends
         b segment
           dw 0,0,0,0,0,0,0,0
         b ends
         code segment
              start: 
			   mov ax, a [076c]
			   mov ds, ax
			   
			   mov ax, b [076e]
			   mov es, ax
			   
			   mov ax, 1000H
			   mov ss, ax
			   mov sp, 0010H [因为栈段dw初始设置为8个字单元 (8*2)=16个字节,为001H。
			                  实际栈范围为(0000H~000fH, 因为栈空，所以sp初始指向下一个字节单元，即001H)]
6、位运算
   如果是一个字节位运算, 那就只能用al, 不能用ax或ds:[0]
7、子程序设计
   如果主程序和子程序都用到了相同的寄存器，需要注意是否冲突
   [可使用栈在主程序保存寄存器值，然后在子程序返回前提取栈的值给寄存器]
8、显示问题
   如果向显存地址写入文字，出现笑脸.可能是B800H的偏移地址写错了
10、二进制计算
    1、二进制计算[无符号-有符号] 
       如果a为0001 0000, b为1001 0000。
       无论是有符号无符号计算a+b, a+b的二进制结果都为1010 0000 [每位累2进1. ], 算值时[1010 0000无符号A0H, 有符号-96]   
    2、有符号1000 0000B的值
       有符号1000 0000B为特殊值：-128
11、计算标号部分占用内存
    start: 
          ...
		  ...
		  ...
		  mov ax, 4c00h
	 sax: 
	      mov bx, 1
		  ....
	 ddd: nop    [sax标号内容占用内存为：mov ax, offset ddd - offset sax]
12、表达式
    mov ax, 6-4 [正确]
13、offset和cld
    mov cx, offset end0-offset site [如果是cld, rep movsb, 那么cx为正(注意offset end0、offset site的数值关系)]
14、ascii码
    db 0, '0'  ; 0是数值，'0'才是30H
	
********继续学习********
P284 外中断