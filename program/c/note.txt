vc6.0++使用
1、编写文本代码[.cpp文件]
2、编译[.obj文件(二进制)]
3、连接[.exe文件]
4、执行[可以选择是否重新编译和连接(如果程序没改动不选择编译)]。
--------程序定义--------
程序 = 算法 +  数据结构
--------注释--------
1、单行注释
   //
2、多行注释
   /**/
--------函数--------
1、C程序总是从main程序开始执行
2、程序调用 
   鉴于程序自上而下编译：
   1、如果函数声明在main之上，可直接在main中调用函数
   2、如果函数声明在main之下，在main中调用需提前声明函数[eg: void shuchu();//声明  shuchu();//使用]
--------变量--------
1、普通变量
   int a, A [C语言区分大小写]
1、符号变量
   1、预编译指令。不占用存储单元
   #define PI 3.14
2、常变量
   1、存在期间，值不能被修改。
   2、占用存储单元
   const int a=3;
--------数据类型--------
基本类型、枚举类型[空类型]、派生类型
1、基本类型
   A、整型类型
      short[2字节]、int[4字节]、short int[2字节]、long int[4字节]、long long int[8字节]、char、bool
   B、浮点类型
      float[4字节]、double[8字节]、复数浮点型
2、枚举类型[enum]-空类型[void]
3、派生类型
   指针类型、数组类型、结构体类型、共用体类型、函数类型
--------运算相关--------
1、系统自动转换及强转换
      a = (int)b
   a、强转换
      (int)6.5
   b、系统自动转换
      3+6.5
2、复合运算
   a+=3
   x*=y+8 //相当于x = x*(y+8)
--------常用算法逻辑--------
1、闰年
   "能被4整除，但不能被100整除" 或者 "能被400整除"
2、素数
   除了1和本身外，不能被其他任何整数整除
3、银行存息
   设本金为P0[活期年利率为R, 两次半年定期为W]
   1、一年后本金+利息
      P1=P0(1+R)
   2、二次半年后本金+利息
	  P2=P0(1+W/2)(1+W/2)
4、移盘子问题
   问题描述：古代有一个梵塔，塔内有3个座ABC, 开始时A座上有64个盘，盘子大小
             不等，大的在下，小的在上。要求：将64个盘子从A座移到C座，规定每
			 次只允许移动一个盘，且在移动过程中在3个座上都始终保持大盘在下，
			 小盘在上。在移动过程中可以利用B座 
   问题分析：属于递归问题
             [1、将N-1个盘子从A借助C移到B
			  2、将第N个盘子从A移到C
			  3、将N-1个盘子从B借助A移到C
			  递归结束条件：当n=1时，直接将盘子从A移到C]
			 步骤1、3对象变化，但操作相同[函数A]、步骤2[函数B]
	void AA(n, A, B, C)
	{//将A中A个物体，借助B移到C
		void move(A, C)；
		if(n==1){move(A, C);}
		else{AA(n-1, A, C, B);move(A, C);AA(n-1, B, A, C);}
	}
	void move(A, C){
		printf("move %c to %c\n", A, C);
	}
--------常用错误--------



--------函数使用--------  
1、空函数
  作用：提前定义，后续再补上代码
2、递归函数
  int fac(int n){
	if(n<0){printf("..");}
    else if(n==0||n==1){f=1;}
	else = fac(n-1)*n;
	return f;
  }
3、内部函数与外部函数
  1、内部函数
	 作用：限定函数只能在被本文件其他函数调用
     static int fun(int a, int b) 
  2、外部函数
     作用：其他文件可以调用
	 规定：在定义函数时，省略extern，则默认为外部函数
	 extern int fun(int a, int b)
	 
--------变量相关--------
1、程序块
   作用域：变量C作为程序块定义变量，只在程序块中有效 
   int main(){int a,b; {int c; c=a+b}}
2、全局变量
   说明：Max与Nox均为全局变量。Max作用域[1、2、3、4], Nox作用域[3、4]
   建议：1、避免使用全局变量[A:在程序执行过程中一直占用内存 B、增加耦合性]
         2、全局变量定义，使用首字母大写，用于与局部变量做区别
   int Max=1; //1
   void c();//2
   int Nox=2; //3
   int main(){ int a;}//4 
3、C变量存储类别
   自动[auto]、静态[static]、寄存器[register]、外部[extern]
   1、静态变量
      1、静态局部变量
	     int f(int a){static int c=3; c=c+1; printf("%d\n", c)};
		 静态局部变量c在编译时赋初值，且只赋初值一次。
		 后续每调用f, 不在对静态局部变量c赋初值而是保留上次函数调用结束时的值
		 补：虽然静态局部变量在函数调用后仍然存在，但其他函数无法引用。因为静
		     态局部变量仍是局部变量，只能本函数引用。
      2、静态全局变量
	     作用：将全局变量a作用域限制在本文件中，其他文件无法引用
	     static int a=0;
		 int main(){
			return 0;
		 }
   2、寄存器变量
      通常变量存放于内存，控制器发出指令从内存地址中取。
	  但对于高频使用率变量，可以将其作为寄存器变量，存放于cpu中,
	  基于cpu寄存器存取速度远高于内存存取速度，可以提高执行效率
	  register int f;
   3、外部变量
      1、文件内使用外部变量
		 int main(){extern int A, B, C; return 0;}
		 int A, B, C;
	  2、将外部变量拓展到其他文件
	     file A.c
		 #include <stdio.h>
         int A=2;
         int main(){int power(int a); int m = power(A); printf("%d\n", m); return 0;}
	    
		 file B.c
		 extern A;
         int power(int a){return a*a;}
	  
	  