vc6.0++使用
1、编写文本代码[.cpp文件]
2、编译[.obj文件(二进制)]
3、连接[.exe文件]
4、执行[可以选择是否重新编译和连接(如果程序没改动不选择编译)]。
--------程序定义--------
程序 = 算法 +  数据结构
--------注释--------
1、单行注释
   //
2、多行注释
   /**/
--------函数--------
1、C程序总是从main程序开始执行
2、程序调用 
   鉴于程序自上而下编译：
   1、如果函数声明在main之上，可直接在main中调用函数
   2、如果函数声明在main之下，在main中调用需提前声明函数[eg: void shuchu();//声明  shuchu();//使用]
--------变量--------
1、普通变量
   int a, A [C语言区分大小写]
1、符号变量
   1、预编译指令。不占用存储单元
   #define PI 3.14
2、常变量
   1、存在期间，值不能被修改。
   2、占用存储单元
   const int a=3;
--------数据类型--------
基本类型、枚举类型[空类型]、派生类型
1、基本类型
   A、整型类型
      short[2字节]、int[4字节]、short int[2字节]、long int[4字节]、long long int[8字节]、char、bool
   B、浮点类型
      float[4字节]、double[8字节]、复数浮点型
2、枚举类型[enum]-空类型[void]
3、派生类型
   指针类型、数组类型、结构体类型、共用体类型、函数类型
4、结构体类型
   结构体每个成员会占用不同的的内存，互相之间没有影响。
   结构体占用的内存等于所有成员占用的内存的总和。
   1、定义及赋值
      struct Date{int month; int day; int year; char mark[20];}; struct Student{char name[20]; int age; struct Date birth;}; //定义 
      struct Date birth,birth2 = {...}, {..} ; //全部赋值
      birth.month = ..; //对Date结构类型变量birth下month赋值	
      birth2 = birth; //同类的结构体可以互相赋值
	  scanf("%d, %d, %d, %s", &birth.month, &birth.day, &birth.year, birth.mark); //只能逐个读入结构体变量
   2、数组
      struct Person{char name[20]; int count;}leader[3] = {{"LI", 0}, {"Zhang", 0}, {"Sun", 0}};
   3、指针
      1、结构体变量指针
	     可用(*p).name, 也可用p->name 
         # include <string.h>
         struct Student{long num; char name[20]; char sex; float score;}stu_1, *p; p = &stu_1; stu_1.num = 1; strcpy(stu_1.name, "lilei");
	     printf("%ld, %s", (*p).num, (*p).name); //用指针输出结构体变量stu_1的num及name值
	  2、结构体数组指针
	     struct Student{long num; char name[20]; char sex; float score;}stu_1[3], *p;
		 for(p=stu; p<stu+3; p++){....p->num...p->name..};
5、共用体类型
   共用体占用的内存等于最长的成员占用的内存。采用内存覆盖技术，同一时刻只能保存一个成员的值，如果对新成员赋值，就会把原来的值覆盖掉。
   1、定义及赋值
      union Data{int i; char ch; float f}a,b,c; //或union Data a;
      a.i = 97; //赋值[共用体只能对其中一个成员初始化, 
	           //不能直接union Data{int i; char ch; float f}a = {1, 'a', 1/5};]
			   //可直接b=a[同类型共用体]
	  printf("%d", a.i); //结果为97
	  printf("%c", a.ch); //结果为'a'
	  printf("%f", a.f); //结果为0.0000
   2、用法
      增加程序灵活性
	  union Categ{int class; char position[10];}；
	  struct{int num; char name[10]; char sex; char job; union Categ category;}person[2];
	  person中有一项要么是class, 要么是position, 可使用共用体增加灵活性.
6、枚举类型
   1、定义及赋值
      enum Day{sun, mon, tue, wed, thu, fri, sat} workday, weekend; 
	  enum Day i,j,k;
	  printf("%d\t %d\t %d\t %d\t %d\t %d\t %d\n",sun, mon, tue, wed, thu, fri, sat); //结果为：0 1 2 3 4 5 6
	  enum Day{sun=8, mon, tue, wde, thu, fri, sat}; //显示指定sun的值
	  printf("%d\t %d\t %d\t %d\t %d\t %d\t %d\n",sun, mon, tue, wed, thu, fri, sat); //结果为：8 9 10 11 12 13 14
7、typedef声明类型
   1、用法
      1、代表基本类型
         typedef int Integer;
	     Integer i, j;  
      2、代表结构体
         typedef struct{int month, int day;}Date; 
         Date birth; 	 
	  3、代表数组类型
	     typedef int Num[100]; 
		 Num a; //定义a为整型数组名，它有100个元素
		 #include <stdio.h> #include <string.h> #include <typeinfo>  
         int main(){typedef int Num[10]; Num i; printf(typeid(i).name()); //输出int *[i为int* 指针变量，后续可通过i[m]赋值及访问i指向地址存储内容]
		 int m;
         for(m=0; m<10; m++){ i[m] = m;}
	     for(m=0; m<10; m++){printf("%d ",i[m]);} 
	  4、代表指向函数的指针
	     typedef int (*Pointer)();
	便于移植：对于不同计算机占用字节不同，涉及到需将int 改为long.此时只需利用typedef int Integer[将int修改为long即可]
--------运算相关--------
1、系统自动转换及强转换
      a = (int)b
   a、强转换
      (int)6.5
   b、系统自动转换
      3+6.5
2、复合运算
   a+=3
   x*=y+8 //相当于x = x*(y+8)
3、逻辑运算符
   &&  ||  !
   1、a&&b&&c
      只有a为真时，才需要执行b操作及判别b的值[同理ab相对于c]
4、条件运算符
   a ? b: c //a为真，则执行b，否则执行c
--------常用算法逻辑--------
1、闰年
   "能被4整除，但不能被100整除" 或者 "能被400整除"
2、素数
   除了1和本身外，不能被其他任何整数整除
3、银行存息
   设本金为P0[活期年利率为R, 两次半年定期为W]
   1、一年后本金+利息
      P1=P0(1+R)
   2、二次半年后本金+利息
	  P2=P0(1+W/2)(1+W/2)
4、移盘子问题
   问题描述：古代有一个梵塔，塔内有3个座ABC, 开始时A座上有64个盘，盘子大小
             不等，大的在下，小的在上。要求：将64个盘子从A座移到C座，规定每
			 次只允许移动一个盘，且在移动过程中在3个座上都始终保持大盘在下，
			 小盘在上。在移动过程中可以利用B座 
   问题分析：属于递归问题
             [1、将N-1个盘子从A借助C移到B
			  2、将第N个盘子从A移到C
			  3、将N-1个盘子从B借助A移到C
			  递归结束条件：当n=1时，直接将盘子从A移到C]
			 步骤1、3对象变化，但操作相同[函数A]、步骤2[函数B]
	void AA(n, A, B, C)
	{//将A中A个物体，借助B移到C
		void move(A, C)；
		if(n==1){move(A, C);}
		else{AA(n-1, A, C, B);move(A, C);AA(n-1, B, A, C);}
	}
	void move(A, C){
		printf("move %c to %c\n", A, C);
	}
--------常用错误--------
1、字符串
   1、定义
      单个字符使用单引号、字符串使用双引号
   2、格式化输出
      %c对应单个字符、%s对应字符串
2、循环使用
   for(int i ...)//会出现报错，应使用int i; for(i=1;....)
3、字符指针变量赋值
   1、赋值
      char *a, str[10]; //1
      a = str; //2
      scanf("%s", a);//3
     理解：需先让字符指针变量a指向一个特定地址，然后才能对其赋值
           可以修改字符数组中的每个值，但无法修改字符指针变量的值[即char *b="ss"; b[1]='n'不可行] 
4、结构体变量赋值
   struct Student{long num; char name[20]; char sex; float score;}stu_1;
   无法使用stu_1.name = "lilei" 赋值。可通过<string.h>中strcpy(stu_1.name, "lilei")赋值    
5、NULL值
   C只能写为NULL[大写]，小写即出错
6、分号使用
   #define LEN sizeof(struct Student) //不能加分号，否则会报异常missing ')' before ';'
   struct Student{char name[20]; int age; struct Student *next;}; //要加分号
7、SCANF使用
   scanf("%d,%d",&a,&b);因为两个%d之间有一个逗号，所以在输入时两个整数之间只能用逗号分隔，如果用其它符号分隔就会出错（比如说此时用空格、回车分隔就会出错）
   如果是scanf("%s, %d"...)//应改成scanf("%d,%s"...)
--------代码优化--------
1、先赋值后判断
   while((*to++=*from++)!='\0'); //先赋值，后自增
2、'\0'判断
   while((*to++=*from++)!='\0') 可优化为while((*to++=*from++);
--------函数使用--------  
1、空函数
  作用：提前定义，后续再补上代码
2、递归函数
  int fac(int n){
	if(n<0){printf("..");}
    else if(n==0||n==1){f=1;}
	else = fac(n-1)*n;
	return f;
  }
3、内部函数与外部函数
  1、内部函数
	 作用：限定函数只能在被本文件其他函数调用
     static int fun(int a, int b) 
  2、外部函数
     作用：其他文件可以调用
	 规定：在定义函数时，省略extern，则默认为外部函数
	 extern int fun(int a, int b)
--------变量相关--------
1、程序块
   作用域：变量C作为程序块定义变量，只在程序块中有效 
   int main(){int a,b; {int c; c=a+b}}
2、全局变量
   说明：Max与Nox均为全局变量。Max作用域[1、2、3、4], Nox作用域[3、4]
   建议：1、避免使用全局变量[A:在程序执行过程中一直占用内存 B、增加耦合性]
         2、全局变量定义，使用首字母大写，用于与局部变量做区别
   int Max=1; //1
   void c();//2
   int Nox=2; //3
   int main(){ int a;}//4 
3、C变量存储类别
   自动[auto]、静态[static]、寄存器[register]、外部[extern]
   1、静态变量
      1、静态局部变量
	     int f(int a){static int c=3; c=c+1; printf("%d\n", c)};
		 静态局部变量c在编译时赋初值，且只赋初值一次。
		 后续每调用f, 不在对静态局部变量c赋初值而是保留上次函数调用结束时的值
		 补：虽然静态局部变量在函数调用后仍然存在，但其他函数无法引用。因为静
		     态局部变量仍是局部变量，只能本函数引用。
      2、静态全局变量
	     作用：将全局变量a作用域限制在本文件中，其他文件无法引用
	     static int a=0;
		 int main(){
			return 0;
		 }
   2、寄存器变量
      通常变量存放于内存，控制器发出指令从内存地址中取。
	  但对于高频使用率变量，可以将其作为寄存器变量，存放于cpu中,
	  基于cpu寄存器存取速度远高于内存存取速度，可以提高执行效率
	  register int f;
   3、外部变量
      1、文件内使用外部变量
		 int main(){extern int A, B, C; return 0;}
		 int A, B, C;
	  2、将外部变量拓展到其他文件
	     file A.c
		 #include <stdio.h>
         int A=2;
         int main(){int power(int a); int m = power(A); printf("%d\n", m); return 0;}
	    
		 file B.c
		 extern A;
         int power(int a){return a*a;}
--------循环选择结构--------
3、选择结构
   1、选择嵌套
	   if()
		   if() 语句1
		   else 语句1
	   else
		   if() 语句2
		   else 语句2
	2、switch分支
	   switch(grade)
	   {
	      case 'a': printf("ok");break; //第一种
		  case 'b':                          
		  case 'c': printf("not bad");break; //第二种
		  case 'd': printf("start get bad");break;
		  default: printf("bad");
	   }
4、循环结构
   continue： 提前结束本次循环[本次循环continue下方的语句不执行]
   break: 跳出循环
--------数组--------
1、初始化
	int a[5] = {0, 1, 2, 3, 4}; //逐个赋值，如果赋值少于元素个数。则系统自动给后面元素赋初值0
	int a[10] = {0}； //全部元素赋值0
	int a[] = {1, 2, 3, 4, 5}; //使用不指定长数组
2、多维数组
	int a[2][3] = {{1, 2, 3, 4}, {5, 6, 7}, {8, 9, 10, 11}};
3、字符数组
	char a[10] = {'i', '', 'a', 'm'}; //建议写成 char a[10] = "i am happy";
4、输出
	char string[] = "nihao";
	printf("%s\n", string); //输出结果：nihao 
--------指针--------
术语：一个变量的地址称为该变量的"指针"。
      指针是一个地址(i的指针是2000)，指针变量是存放地址的变量
1、访问方式
   1、直接访问
       a = 3
	  通过变量名访问值
   2、间接访问
      int a=100; int* addr=&a; //不能直接int *p; *p=2, 需先int *p=&a, 然后*p=2
	  先找到存放地址的变量i、再根据i值指示地址访问数据]
2、指针变量使用
   1、指针使用
      int  a=100, b=99; int *p=&a, *q=&b, *m; m = p;p = q;q = m;
	  printf("%d\t%d\n", *p, *q); //p与q交换，可改变值
   2、函数传递	
      int a=100; int *p=&a; swap(p)...swap(int *q){*q=5}; [修改p指向变量值，达到p指向地址修改]	
      规则：不能通过调用函数改变实参指针变量的值[即在函数中执行2.1步骤]，但是可以改变实参指针所指变量的值[即2.2操作]。
   3、访问数组
      int a[10] = {1,2,3,4};
	  1、a[i]
	  2、*(a+i)// 等同于a[i]
	  3、int *p; for(p=a; p<(a+10); p++){...*(p+i)...};
	  对比：C编译是将a[i]转换为*(a+i)处理。建议使用p指针遍历[效率高]
	  4、用函数处理数组
	     int x[2]={1,2}; void change(int x[]){...}; change(x); //change(int x[])中的int x[]相当于int *x, 在函数中对x进行数值修改，原数组值会同步改变
      5、多维数组
	     int a[10][10]; 
         a //二维数组开始地址
         a+1 //即a[1][0]地址
         a[0]+1 //即&a[0][1]
         *(a+1)+1//即a[1][1],鉴于*(a+i)=a[i]
         *(a[i]+j)//即a[i][j]的值
         使用：
			1、使用int (*p)[n] 处理二维数组	
		       int a[3][4] = {1,2,3,4,5,6,7,8,9,0}; int (*p)[4]; p=a; printf("%d\n", *(*(p+2)+3));//输出p[2][3]的值
               理解：int (*p)[4]中，p的类型为int (*)[4], 长度为16, p=a,相当于p指向一个长度为16的4个元素的一维数组。后续使用*(*(p+i)+j)取得数组元素		  
			2、使用int *p处理二维数组
			   int a[3][4] = {1,2,3,4,5,6,7,8,9,0}; int *p,*p_end; p=*a; p_end=p+12-1l; for(; p<p_end;p++){printf("%d\t", *p)}; //输出二维数组所有值
			   理解：p=*a相当于p=a[0][0],p逐加1,即可遍历a二维数组所有地址,然后用*p取得地址对应存储值
	  6、指针数组
	     1、定义
		    一个数组，若其元素均为指针类型数据，称为指针数组. int*  p[4];
		 2、使用 
		    char *name[] = {"Follow me", "Basic"}; printf("%s", name[1]);//输出"Basic"值
			指针数组可以存放字符串，但是不能存放整型值
   4、处理字符串
      char *string = "nihao";
	  printf("%s\n", string); //输出结果: nihao 将nihao字符串的第一个元素地址赋值给string]
   5、访问函数
      1、指针变量调用函数
         int maxix(int x, int y){..}; int(*p)(int x, int y); p=maxix; int a=10,b=9; (*p)(a, b); 
	  2、指针变量作为形参
	     int max(int x, int y){...}; int x=10, y=100; int choose(int x, int y, int(*p)(int, int)); choose(x, y, max);
	  3、返回指针类型的函数
         int* p(int x, int y);	
   6、指向指针的指针
	  char **p //可理解为char* (*p)， p是一个指向char *指针的指针变量[char *p p是一个指针变量，指向char]
	  1、处理字符数组
		 char *ar[] = {"hi", "good", "yeah"}; char **p; int len = strlen(ar), i; for(i=0; i<len; i++){ p = ar+i; printf("%s\n", *p);} //逐个输出ar数组所有字符串
		 理解：p是一个指向字符指针的指针变量. ar数组中每个元素均为指针变量.p=ar+0表示p指向a[0], printf("%d", *p)//打印a[0]地址.  printf("%s", *p)//输出"hi" 
	  2、处理整型数组
		 int a[5] = {1,2,3,4,5}; int *num[5] = {&a[0], &a[1], &a[2], &a[3], &a[4]}; int **p, i; for(i=0; i<5;i++){ p = num+i; printf("%d\n", **p);} //逐个输出a数组所有值		 
   7、处理链表
      结构体中包含next指针指向下一个结构体元素...
      1、静态链表
	     非动态临时分配链表
	     struct Student a, b, *head, *p; strcpy(a.name, "lilei");
	     a.age = 12; strcpy(b.name, "zhangsan"); b.age = 14;
	     head = &a; p = head; a.next = &b; b.next = NULL;
	     do{ printf("%s\t%d\n", p->name, p->age); p=p->next; }while(p!=NULL);
	  2、动态链表
	     程序在执行过程中从无到有建立链表[动态分配内存]
		 struct Student *head, *p1, *p2;
	     p1 = (struct Student *)malloc(LEN); 
	     scanf("%d %s", &p1->age, p1->name);
	     printf("第一次年龄: %d\t%s\n", p1->age, p1->name);
	     head = p1; //头指针
	     while(1){ p2 = p1; p1 = (struct Student *)malloc(LEN); scanf("%d %s", &p1->age, p1->name);
		          if(p1->age == 0){ break;} 
				  p2->next = p1;
				  }
	     p2->next = NULL; p1 = head;
		 while(p1!=NULL){ printf("名字: %s, 年龄: %d\n", p1->name, p1->age); p1 = p1->next;}
   8、void指针类型
      理解：指向"空类型" 或 "不确定指向类型"的指针
      int a = 3;
      void *p = &a;	//空指针p得到a的纯地址，无法通过*p输出a的值
   9、补充
      *p++ 等同于*(p++)
	  ++(*p) 指针p指向变量值自增1，指针变量值不变[即值变，地址不变]
--------动态分配--------
所属头文件: <stdlib.h>
1、malloc函数
   void *malloc(unsigned int size) //在内存的动态存储区中分配一个长度为size的连续空间
   pt =(int *)malloc(100); //开辟100字节的临时分配域。函数值为其第一个字节的地址。[如果失败, 返回null]
2、calloc函数
   void *calloc(unsigned n, unsigned size) //在内存的动态存储区中分配n个长度为size的连续空间[如果失败, 返回null]
   p = (int *)calloc(50, 4); //开辟50*4个字节的临时分配域，把起始地址赋给指针变量p
3、free函数
   void free(void *p) //释放指针变量p所指向的动态空间
   free(p); //释放指针变量p所指向的已分配动态空间
4、realloc函数      
   void *realloc(void *p, unsigned int size) //修改malloc或calloc获得的动态空间大小[重新分配空间,如果失败返回null]
   relloc(p, 50); //将p指向的已分配动态空间修改为50字节 
--------文件相关--------
1、文件缓冲区
   定义：系统自动在内存区为每一个正在使用的文件开辟一个文件缓冲区。从内存向磁盘输出程序必须先送到内存中的缓冲区，
   装满缓冲区后再一起送到磁盘去。如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到文件缓冲区，然后从
   缓冲区逐个将数据送到程序数据区。
2、标准输入流-标准输出流-标准出错输出流
   标准输入流 -- stdin
   标准输出流 -- stdout
   标准出错输出流 -- stderr
3、文件函数
   FILE *fp = fopen("C:\\Users\\Administrator\\Desktop\\file.txt", "r"); //文件读取[读取失败时返回NULL]
   fclose(fp) // 文件关闭[数据从缓冲区充满后输出给文件[关闭失败时返回-1]
              //需关闭文件再结束程序运行(fclose关闭文件会先把缓冲区数据输出到文件),
           	  //否则缓冲区数据会丢失]
   1、文件方式:
	   "r"、"w", "a", [只读、只写、只追加]
	   "rb", "wb", "ab", [二进制版本(只读、只写、只追加)]
	   "r+", "w+", "a+", [可读可写]
	   "rb+", "wb+", "ab+"[二进制版本(可读可写)]
	   无论用那种w, 如果文件不存在会自动新建文件。
	   无论用哪种r, a, 如果文件不存在会报错。
   2、其他函数:
	   1、fgetc(fp) //读入一个字符[成功即返回所读字符，失败返回-1]
	   2、fputc(ch, fp) //将字符ch写到fp指向的文件[成功即返回所读字符，失败返回-1]
	   3、feof(fp) //判断fp是否移到文件末尾[失败返回0]
	   4、fgets(str, n, fp) //读取一个长度为n-1的字符串，存放在字符数组str中[失败返回NULL]
	   5、fputs(str, fp)  //把str所指向的字符串写到fp指向的文件中[成功即返回0，失败返回非0值]
	   6、fprinf(fp, "%s, %f", i,j) //将字符串型变量i, 浮点型变量j输入到文件fp中
	   7、fread(f, 4, 10, fp) //从fp指向的文件中，读取10个4字节[按数据块长度处理，不涉及字符转换]
	   8、fwrite(f, 4, 10, fp) //将f地址的数据，写入10个4字节到fp指向的文件中[按数据块长度处理，不涉及字符转换]
	   9、rewind(fp) //	使文件位置标记返回文件头[无返回值]
	   10、fseek(fp, 100L, 0) //将文件指针fp从开头移后面100个字节处
	       fseek(fp, 50L, 1) //将文件指针fp从当前指向位置移至后面50个字节处
		   fseek(fp, -10L, 2) //将文件指针fp从文件末尾位置后退10个字节
	   11、ftell(fp) //测定文件位置标记的当前位置[失败返回-1L]
	   12、ferror(fp)及clearerr(fp)
	   使用示例：
	   1、读
			char ch; FILE *fp = fopen("C:\\Users\\Administrator\\Desktop\\file.txt", "r");
			if(fp != NULL){ 
				while(!feof(fp)){ //feof: 判断是否遇到输入文件的结束标志
					ch = fgetc(fp); printf("%c\n", ch); //逐个读取打印字符
				}
				fclose(fp);
			}else{ printf("not ok"); exit(0);}
	   2、写
			FILE *fp = fopen("C:\\Users\\Administrator\\Desktop\\file.txt", "w");
			if(fp != NULL){fputs("you good", fp); fputc('\n', fp); fputs("you fucking good", fp);
				fclose(fp);
			}else{ printf("not ok");exit(0); }