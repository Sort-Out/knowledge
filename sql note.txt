1、char 与 varchar
该字段数据集的平均长度与最大长度是否相差很小，若相差很小优先考虑CHAR类型，反之，考虑VARCHAR类型。
若字段存储的是MD5后的哈希值，或一些定长的值，优先选取CHAR类型。
若字段经常需要更新，则优先考虑CHAR类型，由于CHAR类型为定长，因此不容易产生碎片。
对于字段值存储很小的信息，如性别等，优先选取CHAR类型，因为VARCHAR类型会占用额外的字节保存字符串长度信息。
补充：
     VARCHAR节省了存储空间，所以对性能也有帮助。但是，由于行是变长的，在UPDATE时可能使行变得比原来更长，
	 这就导致需要做额外的工作。如果一个行占用的空间增长，并且在页内没有更多的空间可以存储，在这种情况下，
	 不同的存储引擎的处理方式是不一样的。例如，MyISAM会将行拆成不同的片段存储，InnoDB则需要分裂页来使行可以放进页内。
	 其他一些存储引擎也许从不在原数据位置更新数据，导致碎片产生。
	 
2、索引和约束
索引；一种特殊文件，可以提高数据的查询数据，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。
普通索引
唯一索引：索引列的值必须唯一，但允许有空值
主键：张表最多只能创建一个主键；主键在唯一索引基础上，不允许非空；主键可以被其他表引用为外键。
复合主键：表中的主键含有一个以上的字段，比如：primary key(name, id)；复合主键体现在一个表中的多个字段。
区别：主键和索引都是键，主键是逻辑键，索引是物理键，所以主键实际不存在，而索引存在于数据库中。
eg：对于书，主键相当于页码，索引相当于书的目录
外键：mysql外键使用的存储引擎为innodb, 有些引擎并不支持外键; 外键可以较大程度的保证数据库数据的一致性和完整性。
      设置外键约束的两个表之间具有父子关系，即子表中外键的字段取值范围由父表决定；
	  设置外键一定程度上会降低数据库的速度；字表的外键字段的数据类型和父表要一致。